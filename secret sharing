const fs = require('fs');

// Function to decode values from different bases
function decodeValue(value, base) {
    return parseInt(value, base);
}

// Lagrange interpolation function
function lagrangeInterpolation(points, k) {
    let total = 0;
    
    for (let i = 0; i < k; i++) {
        let [xi, yi] = points[i];
        let term = yi;

        for (let j = 0; j < k; j++) {
            if (i !== j) {
                let [xj, _] = points[j];
                term *= (0 - xj) / (xi - xj); // Evaluating the constant term (x=0)
            }
        }
        total += term;
    }

    return total;
}

// Function to extract points from the JSON data
function extractPoints(data) {
    let points = [];

    for (let key in data) {
        if (key !== "keys") {
            let x = parseInt(key);
            let y = decodeValue(data[key].value, parseInt(data[key].base));
            points.push([x, y]);
        }
    }

    return points;
}

// Function to check for wrong points
function checkWrongPoints(points, polynomialValue) {
    let wrongPoints = [];

    points.forEach(point => {
        let [xi, yi] = point;
        let calculatedValue = 0;

        points.forEach(([xj, yj], j) => {
            if (xi !== xj) {
                calculatedValue += yj * (xi - xj);
            }
        });

        if (calculatedValue !== yi) {
            wrongPoints.push(point);
        }
    });

    return wrongPoints;
}

// Main function to solve the problem
function solvePolynomial(testCase) {
    let n = testCase.keys.n;
    let k = testCase.keys.k;

    let points = extractPoints(testCase);

    let secret = lagrangeInterpolation(points, k);

    return secret;
}

// Load JSON input from file
function loadTestCase(filePath) {
    const data = fs.readFileSync(filePath, 'utf8');
    return JSON.parse(data);
}

// Test cases
const testCase1 = loadTestCase('test_case_1.json');
const testCase2 = loadTestCase('test_case_2.json');

// Solve for both test cases
const secret1 = solvePolynomial(testCase1);
const secret2 = solvePolynomial(testCase2);

// Check for wrong points in the second test case
const points2 = extractPoints(testCase2);
const wrongPoints2 = checkWrongPoints(points2, secret2);

// Print the results
console.log(`Secret for test case 1: ${secret1}`);
console.log(`Secret for test case 2: ${secret2}`);
console.log(`Wrong points in test case 2: ${JSON.stringify(wrongPoints2)}`);
